"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const AppError_1 = require("./AppError");
const git = require("./git");
const npm = require("./npm");
const packagejson = require("./packagejson");
const VersionUtils = require("./VersionUtils");
const EXPECTED_CURRENT_BRANCH = "master";
const REMOTE_NAME = "origin";
const GIT_IGNORE_FILENAME = ".gitignore";
const GIT_IGNORE_DEPLOY_EXTRAS_FILENAME = ".gitignore-deploy-extras";
const ENCODING = "utf8";
exports.VersionBumpOptions = VersionUtils.VersionBumpOptions;
function applyGitIgnoreDeployExtras() {
    const extrasData = [
        "",
        "",
        "# deploy only:",
        fs.readFileSync(GIT_IGNORE_DEPLOY_EXTRAS_FILENAME, { encoding: ENCODING })
    ].join("\n");
    fs.appendFileSync(GIT_IGNORE_FILENAME, extrasData, { encoding: ENCODING });
}
function appAssert(condition, message) {
    if (!condition) {
        throw new AppError_1.AppError(message);
    }
    return true;
}
function run(attrs) {
    console.log("Verifying branch readiness...");
    appAssert(git.isCwdAGitRepo(), "this is not a git repo");
    appAssert(git.currentBranchName() === EXPECTED_CURRENT_BRANCH, `not on expected branch (${EXPECTED_CURRENT_BRANCH})`);
    appAssert(!git.thereAreUncommittedChanges(), "there are uncommitted changes");
    appAssert(!git.thereAreUntrackedFiles(), "there are untracked files");
    appAssert(fs.existsSync(GIT_IGNORE_DEPLOY_EXTRAS_FILENAME), `no ${GIT_IGNORE_DEPLOY_EXTRAS_FILENAME} file`);
    appAssert(packagejson.exists(), "no package.json");
    appAssert(!git.localBranchExists(attrs.branch), `local branch ${attrs.branch} already exists`);
    const newVersion = VersionUtils.bumpVersion(packagejson.getVersion(), attrs.versionBump);
    const originalRemoteURL = git.remote.getURL(REMOTE_NAME);
    console.log(`Switching to build branch (${attrs.branch})...`);
    git.checkout(["-b", attrs.branch]);
    console.log(`Building ${newVersion}...`);
    packagejson.setVersion(newVersion);
    npm.runBuild();
    console.log(`Pushing to ${REMOTE_NAME}/${attrs.branch}...`);
    applyGitIgnoreDeployExtras();
    git.remote.setURL(REMOTE_NAME, originalRemoteURL);
    git.fetch({
        depth: 100000,
        branch: attrs.branch,
        repo: REMOTE_NAME,
        allowUnknownBranch: true
    });
    git.add.all();
    git.commit({ message: `deploy v${newVersion}` });
    if (attrs.subtreeDir) {
        try {
            git.push({
                repo: REMOTE_NAME,
                fromBranch: "",
                toBranch: attrs.branch
            });
        }
        catch (e) {
        }
        git.subtree.push({
            prefix: attrs.subtreeDir,
            repository: REMOTE_NAME,
            ref: attrs.branch
        });
    }
    else {
        git.push({
            force: true,
            repo: REMOTE_NAME,
            fromBranch: "HEAD",
            toBranch: attrs.branch
        });
    }
    console.log(`Switching back to original branch (${EXPECTED_CURRENT_BRANCH})...`);
    git.checkout([EXPECTED_CURRENT_BRANCH]);
    console.log("Tagging successful build...");
    if (attrs.versionBump !== VersionUtils.VersionBumpOptions.none) {
        packagejson.setVersion(newVersion);
        git.add(["package.json"]);
        git.commit({ message: `v${newVersion}` });
    }
    git.tag(`v${newVersion}`, { force: true });
    console.log("Cleaning up...");
    git.branch.forceDelete(attrs.branch);
    console.log(`Successfully pushed ${newVersion}!`);
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVwbG95Q29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9EZXBsb3lDb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUJBQXlCO0FBRXpCLHlDQUFzQztBQUN0Qyw2QkFBNkI7QUFDN0IsNkJBQTZCO0FBQzdCLDZDQUE2QztBQUM3QywrQ0FBK0M7QUFFL0MsTUFBTSx1QkFBdUIsR0FBRyxRQUFRLENBQUM7QUFDekMsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDO0FBQzdCLE1BQU0sbUJBQW1CLEdBQUcsWUFBWSxDQUFDO0FBQ3pDLE1BQU0saUNBQWlDLEdBQUcsMEJBQTBCLENBQUM7QUFDckUsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDO0FBRVgsUUFBQSxrQkFBa0IsR0FBRyxZQUFZLENBQUMsa0JBQWtCLENBQUM7QUFTbEUsU0FBUywwQkFBMEI7SUFDakMsTUFBTSxVQUFVLEdBQUc7UUFDakIsRUFBRTtRQUNGLEVBQUU7UUFDRixnQkFBZ0I7UUFDaEIsRUFBRSxDQUFDLFlBQVksQ0FDYixpQ0FBaUMsRUFDakMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQ3ZCO0tBQ0YsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDYixFQUFFLENBQUMsY0FBYyxDQUFDLG1CQUFtQixFQUFFLFVBQVUsRUFBRSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQzdFLENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxTQUFrQixFQUFFLE9BQWU7SUFDcEQsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNkLE1BQU0sSUFBSSxtQkFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzdCO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsU0FBZ0IsR0FBRyxDQUFDLEtBQXlCO0lBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsK0JBQStCLENBQUMsQ0FBQztJQUU3QyxTQUFTLENBQUMsR0FB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